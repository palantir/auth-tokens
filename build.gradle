buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayVersion"
        classpath "com.netflix.nebula:gradle-dependency-lock-plugin:4.9.3"
        classpath "com.netflix.nebula:gradle-info-plugin:$nebulaInfoVersion"
        classpath "com.netflix.nebula:nebula-publishing-plugin:$nebulaPublishingVersion"
        classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:$gitVersionVersion"
        classpath "gradle.plugin.com.palantir:gradle-baseline-java:$baselineVersion"
        classpath "gradle.plugin.org.inferred:gradle-processors:$processorVersion"
        classpath 'com.netflix.nebula:nebula-bintray-plugin:3.3.4'
        classpath 'gradle.plugin.com.palantir.configurationresolver:gradle-configuration-resolver-plugin:0.1.0'
    }
}

apply plugin: 'com.palantir.baseline-config'
apply plugin: 'com.palantir.baseline-idea'
apply plugin: 'com.palantir.git-version'

allprojects {
    apply plugin: 'com.palantir.configuration-resolver'

    group 'com.palantir.tokens2'

    repositories {
        jcenter()
    }

    version gitVersion()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.palantir.baseline-checkstyle'
    apply plugin: 'com.palantir.baseline-eclipse'
    apply plugin: 'com.palantir.baseline-findbugs'
    apply plugin: 'com.palantir.baseline-idea'
    apply plugin: 'org.inferred.processors'

    sourceCompatibility = 1.8

    apply plugin: 'nebula.dependency-lock'
    dependencyLock {
        includeTransitives = true
        lockFile = 'versions.lock'
        configurationNames = ['runtime', 'compileClasspath']
    }
    task verifyDependencyLocksAreCurrent << {
        def expectedDependencies = tasks.saveLock.getOutputLock()
        def actualDependencies = tasks.saveLock.getGeneratedLock()
        def digester = java.security.MessageDigest.getInstance('SHA')
        logger.info("Verifying integrity of dependency locks: {} vs {}", expectedDependencies, actualDependencies)
        if (digester.digest(expectedDependencies.bytes) != digester.digest(actualDependencies.bytes)) {
            throw new GradleException("The dependencies of project " + project.name + " do not match the expected "
                + "dependencies recorded in " + expectedDependencies + ". "
                + "Run `./gradlew generateLock saveLock` and commit the updated version.lock files")
        }
    }

    if (System.env.CIRCLE_TEST_REPORTS) {
        test.reports.junitXml.destination = new File(System.env.CIRCLE_TEST_REPORTS, it.getName())
    }
}
